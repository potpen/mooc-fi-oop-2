
|// Low-level VM code for MIPS CPUs.
|// Bytecode interpreter, fast functions and helper functions.
|// Copyright (C) 2005-2022 Mike Pall. See Copyright Notice in luajit.h
|//
|// MIPS soft-float support contributed by Djordje Kovacevic and
|// Stefan Pejic from RT-RK.com, sponsored by Cisco Systems, Inc.
|
|.arch mips
|.section code_op, code_sub
|
|.actionlist build_actionlist
|.globals GLOB_
|.globalnames globnames
|.externnames extnames
|
|// Note: The ragged indentation of the instructions is intentional.
|//       The starting columns indicate data dependencies.
|
|//-----------------------------------------------------------------------
|
|// Fixed register assignments for the interpreter.
|// Don't use: r0 = 0, r26/r27 = reserved, r28 = gp, r29 = sp, r31 = ra
|
|.macro .FPU, a, b
|.if FPU
|  a, b
|.endif
|.endmacro
|
|// The following must be C callee-save (but BASE is often refetched).
|.define BASE,		r16	// Base of current Lua stack frame.
|.define KBASE,		r17	// Constants of current Lua function.
|.define PC,		r18	// Next PC.
|.define DISPATCH,	r19	// Opcode dispatch table.
|.define LREG,		r20	// Register holding lua_State (also in SAVE_L).
|.define MULTRES,	r21	// Size of multi-result: (nresults+1)*8.
|
|.define JGL,		r30	// On-trace: global_State + 32768.
|
|// Constants for type-comparisons, stores and conversions. C callee-save.
|.define TISNUM,	r22
|.define TISNIL,	r30
|.if FPU
|.define TOBIT,		f30	// 2^52 + 2^51.
|.endif
|
|// The following temporaries are not saved across C calls, except for RA.
|.define RA,		r23	// Callee-save.
|.define RB,		r8
|.define RC,		r9
|.define RD,		r10
|.define INS,		r11
|
|.define AT,		r1	// Assembler temporary.
|.define TMP0,		r12
|.define TMP1,		r13
|.define TMP2,		r14
|.define TMP3,		r15
|
|// MIPS o32 calling convention.
|.define CFUNCADDR,	r25
|.define CARG1,		r4
|.define CARG2,		r5
|.define CARG3,		r6
|.define CARG4,		r7
|
|.define CRET1,		r2
|.define CRET2,		r3
|
|.if ENDIAN_LE
|.define SFRETLO,	CRET1
|.define SFRETHI,	CRET2
|.define SFARG1LO,	CARG1
|.define SFARG1HI,	CARG2
|.define SFARG2LO,	CARG3
|.define SFARG2HI,	CARG4
|.else
|.define SFRETLO,	CRET2
|.define SFRETHI,	CRET1
|.define SFARG1LO,	CARG2
|.define SFARG1HI,	CARG1
|.define SFARG2LO,	CARG4
|.define SFARG2HI,	CARG3
|.endif
|
|.if FPU
|.define FARG1,		f12
|.define FARG2,		f14
|
|.define FRET1,		f0
|.define FRET2,		f2
|.endif
|
|// Stack layout while in interpreter. Must match with lj_frame.h.
|.if FPU		// MIPS32 hard-float.
|
|.define CFRAME_SPACE,	112	// Delta for sp.
|
|.define SAVE_ERRF,	124(sp)	// 32 bit C frame info.
|.define SAVE_NRES,	120(sp)
|.define SAVE_CFRAME,	116(sp)
|.define SAVE_L,	112(sp)
|//----- 8 byte aligned, ^^^^ 16 byte register save area, owned by interpreter.
|.define SAVE_GPR_,	72	// .. 72+10*4: 32 bit GPR saves.
|.define SAVE_FPR_,	24	// .. 24+6*8: 64 bit FPR saves.
|
|.else			// MIPS32 soft-float
|
|.define CFRAME_SPACE,	64	// Delta for sp.
|
|.define SAVE_ERRF,	76(sp)	// 32 bit C frame info.
|.define SAVE_NRES,	72(sp)
|.define SAVE_CFRAME,	68(sp)
|.define SAVE_L,	64(sp)
|//----- 8 byte aligned, ^^^^ 16 byte register save area, owned by interpreter.
|.define SAVE_GPR_,	24	// .. 24+10*4: 32 bit GPR saves.
|
|.endif
|
|.define SAVE_PC,	20(sp)
|.define ARG5,		16(sp)
|.define CSAVE_4,	12(sp)
|.define CSAVE_3,	8(sp)
|.define CSAVE_2,	4(sp)
|.define CSAVE_1,	0(sp)
|//----- 8 byte aligned, ^^^^ 16 byte register save area, owned by callee.
|
|.define ARG5_OFS,	16
|.define SAVE_MULTRES,	ARG5
|
|//-----------------------------------------------------------------------
|
|.macro saveregs
|  addiu sp, sp, -CFRAME_SPACE
|  sw ra, SAVE_GPR_+9*4(sp)
|  sw r30, SAVE_GPR_+8*4(sp)
|   .FPU sdc1 f30, SAVE_FPR_+5*8(sp)
|  sw r23, SAVE_GPR_+7*4(sp)
|  sw r22, SAVE_GPR_+6*4(sp)
|   .FPU sdc1 f28, SAVE_FPR_+4*8(sp)
|  sw r21, SAVE_GPR_+5*4(sp)
|  sw r20, SAVE_GPR_+4*4(sp)
|   .FPU sdc1 f26, SAVE_FPR_+3*8(sp)
|  sw r19, SAVE_GPR_+3*4(sp)
|  sw r18, SAVE_GPR_+2*4(sp)
|   .FPU sdc1 f24, SAVE_FPR_+2*8(sp)
|  sw r17, SAVE_GPR_+1*4(sp)
|  sw r16, SAVE_GPR_+0*4(sp)
|   .FPU sdc1 f22, SAVE_FPR_+1*8(sp)
|   .FPU sdc1 f20, SAVE_FPR_+0*8(sp)
|.endmacro
|
|.macro restoreregs_ret
|  lw ra, SAVE_GPR_+9*4(sp)
|  lw r30, SAVE_GPR_+8*4(sp)
|   .FPU ldc1 f30, SAVE_FPR_+5*8(sp)
|  lw r23, SAVE_GPR_+7*4(sp)
|  lw r22, SAVE_GPR_+6*4(sp)
|   .FPU ldc1 f28, SAVE_FPR_+4*8(sp)
|  lw r21, SAVE_GPR_+5*4(sp)
|  lw r20, SAVE_GPR_+4*4(sp)
|   .FPU ldc1 f26, SAVE_FPR_+3*8(sp)
|  lw r19, SAVE_GPR_+3*4(sp)
|  lw r18, SAVE_GPR_+2*4(sp)
|   .FPU ldc1 f24, SAVE_FPR_+2*8(sp)
|  lw r17, SAVE_GPR_+1*4(sp)
|  lw r16, SAVE_GPR_+0*4(sp)
|   .FPU ldc1 f22, SAVE_FPR_+1*8(sp)
|   .FPU ldc1 f20, SAVE_FPR_+0*8(sp)
|  jr ra
|  addiu sp, sp, CFRAME_SPACE
|.endmacro
|
|// Type definitions. Some of these are only used for documentation.
|.type L,		lua_State,	LREG
|.type GL,		global_State
|.type TVALUE,		TValue
|.type GCOBJ,		GCobj
|.type STR,		GCstr
|.type TAB,		GCtab
|.type LFUNC,		GCfuncL
|.type CFUNC,		GCfuncC
|.type PROTO,		GCproto
|.type UPVAL,		GCupval
|.type NODE,		Node
|.type NARGS8,		int
|.type TRACE,		GCtrace
|.type SBUF,		SBuf
|
|//-----------------------------------------------------------------------
|
|// Trap for not-yet-implemented parts.
|.macro NYI; .long 0xec1cf0f0; .endmacro
|
|// Macros to mark delay slots.
|.macro ., a; a; .endmacro
|.macro ., a,b; a,b; .endmacro
|.macro ., a,b,c; a,b,c; .endmacro
|
|//-----------------------------------------------------------------------
|
|// Endian-specific defines.
|.if ENDIAN_LE
|.define FRAME_PC,	-4
|.define FRAME_FUNC,	-8
|.define HI,		4
|.define LO,		0
|.define OFS_RD,	2
|.define OFS_RA,	1
|.define OFS_OP,	0
|.else
|.define FRAME_PC,	-8
|.define FRAME_FUNC,	-4
|.define HI,		0
|.define LO,		4
|.define OFS_RD,	0
|.define OFS_RA,	2
|.define OFS_OP,	3
|.endif
|
|// Instruction decode.
|.macro decode_OP1, dst, ins; andi dst, ins, 0xff; .endmacro
|.macro decode_OP4a, dst, ins; andi dst, ins, 0xff; .endmacro
|.macro decode_OP4b, dst; sll dst, dst, 2; .endmacro
|.macro decode_RC4a, dst, ins; srl dst, ins, 14; .endmacro
|.macro decode_RC4b, dst; andi dst, dst, 0x3fc; .endmacro
|.macro decode_RD4b, dst; sll dst, dst, 2; .endmacro
|.macro decode_RA8a, dst, ins; srl dst, ins, 5; .endmacro
|.macro decode_RA8b, dst; andi dst, dst, 0x7f8; .endmacro
|.macro decode_RB8a, dst, ins; srl dst, ins, 21; .endmacro
|.macro decode_RB8b, dst; andi dst, dst, 0x7f8; .endmacro
|.macro decode_RD8a, dst, ins; srl dst, ins, 16; .endmacro
|.macro decode_RD8b, dst; sll dst, dst, 3; .endmacro
|.macro decode_RDtoRC8, dst, src; andi dst, src, 0x7f8; .endmacro
|
|// Instruction fetch.
|.macro ins_NEXT1
|  lw INS, 0(PC)
|   addiu PC, PC, 4
|.endmacro
|// Instruction decode+dispatch.
|.macro ins_NEXT2
|  decode_OP4a TMP1, INS
|  decode_OP4b TMP1
|  addu TMP0, DISPATCH, TMP1
|   decode_RD8a RD, INS
|  lw AT, 0(TMP0)
|   decode_RA8a RA, INS
|   decode_RD8b RD
|  jr AT
|   decode_RA8b RA
|.endmacro
|.macro ins_NEXT
|  ins_NEXT1
|  ins_NEXT2
|.endmacro
|
|// Instruction footer.
|.if 1
|  // Replicated dispatch. Less unpredictable branches, but higher I-Cache use.
|  .define ins_next, ins_NEXT
|  .define ins_next_, ins_NEXT
|  .define ins_next1, ins_NEXT1
|  .define ins_next2, ins_NEXT2
|.else
|  // Common dispatch. Lower I-Cache use, only one (very) unpredictable branch.
|  // Affects only certain kinds of benchmarks (and only with -j off).
|  .macro ins_next
|    b ->ins_next
|  .endmacro
|  .macro ins_next1
|  .endmacro
|  .macro ins_next2
|    b ->ins_next
|  .endmacro
|  .macro ins_next_
|  ->ins_next:
|    ins_NEXT
|  .endmacro
|.endif
|
|// Call decode and dispatch.
|.macro ins_callt
|  // BASE = new base, RB = LFUNC/CFUNC, RC = nargs*8, FRAME_PC(BASE) = PC
|  lw PC, LFUNC:RB->pc
|  lw INS, 0(PC)
|   addiu PC, PC, 4
|  decode_OP4a TMP1, INS
|   decode_RA8a RA, INS
|  decode_OP4b TMP1
|   decode_RA8b RA
|  addu TMP0, DISPATCH, TMP1
|  lw TMP0, 0(TMP0)
|  jr TMP0
|   addu RA, RA, BASE
|.endmacro
|
|.macro ins_call
|  // BASE = new base, RB = LFUNC/CFUNC, RC = nargs*8, PC = caller PC
|  sw PC, FRAME_PC(BASE)
|  ins_callt
|.endmacro
|
|//-----------------------------------------------------------------------
|
|.macro branch_RD
|  srl TMP0, RD, 1
|  lui AT, (-(BCBIAS_J*4 >> 16) & 65535)
|  addu TMP0, TMP0, AT
|  addu PC, PC, TMP0
|.endmacro
|
|// Assumes DISPATCH is relative to GL.
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define GG_DISP2GOT		(GG_OFS(got) - GG_OFS(dispatch))
#define DISPATCH_GOT(name)	(GG_DISP2GOT + 4*LJ_GOT_##name)
|
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))
|
|.macro load_got, func
|  lw CFUNCADDR, DISPATCH_GOT(func)(DISPATCH)
|.endmacro
|// Much faster. Sadly, there's no easy way to force the required code layout.
|// .macro call_intern, func; bal extern func; .endmacro
|.macro call_intern, func; jalr CFUNCADDR; .endmacro
|.macro call_extern; jalr CFUNCADDR; .endmacro
|.macro jmp_extern; jr CFUNCADDR; .endmacro
|
|.macro hotcheck, delta, target
|  srl TMP1, PC, 1
|  andi TMP1, TMP1, 126
|  addu TMP1, TMP1, DISPATCH
|  lhu TMP2, GG_DISP2HOT(TMP1)
|  addiu TMP2, TMP2, -delta
|  bltz TMP2, target
|.  sh TMP2, GG_DISP2HOT(TMP1)
|.endmacro
|
|.macro hotloop
|  hotcheck HOTCOUNT_LOOP, ->vm_hotloop
|.endmacro
|
|.macro hotcall
|  hotcheck HOTCOUNT_CALL, ->vm_hotcall
|.endmacro
|
|// Set current VM state. Uses TMP0.
|.macro li_vmstate, st; li TMP0, ~LJ_VMST_..st; .endmacro
|.macro st_vmstate; sw TMP0, DISPATCH_GL(vmstate)(DISPATCH); .endmacro
|
|// Move table write barrier back. Overwrites mark and tmp.
|.macro barrierback, tab, mark, tmp, target
|  lw tmp, DISPATCH_GL(gc.grayagain)(DISPATCH)
|   andi mark, mark, ~LJ_GC_BLACK & 255		// black2gray(tab)
|  sw tab, DISPATCH_GL(gc.grayagain)(DISPATCH)
|   sb mark, tab->marked
|  b target
|.  sw tmp, tab->gclist
|.endmacro
|
|//-----------------------------------------------------------------------

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
  |.code_sub
  |
  |//-----------------------------------------------------------------------
  |//-- Return handling ----------------------------------------------------
  |//-----------------------------------------------------------------------
  |
  |->vm_returnp:
  |  // See vm_return. Also: TMP2 = previous base.
  |  andi AT, PC, FRAME_P
  |  beqz AT, ->cont_dispatch
  |.  li TMP1, LJ_TTRUE
  |
  |  // Return from pcall or xpcall fast func.
  |  lw PC, FRAME_PC(TMP2)		// Fetch PC of previous frame.
  |  move BASE, TMP2			// Restore caller base.
  |  // Prepending may overwrite the pcall frame, so do it at the end.
  |   sw TMP1, FRAME_PC(RA)		// Prepend true to results.
  |   addiu RA, RA, -8
  |
  |->vm_returnc:
  |   addiu RD, RD, 8			// RD = (nresults+1)*8.
  |  andi TMP0, PC, FRAME_TYPE
  |   beqz RD, ->vm_unwind_c_eh
  |.   li CRET1, LUA_YIELD
  |  beqz TMP0, ->BC_RET_Z		// Handle regular return to Lua.
  |.  move MULTRES, RD
  |
  |->vm_return:
  |  // BASE = base, RA = resultptr, RD/MULTRES = (nresults+1)*8, PC = return
  |  // TMP0 = PC & FRAME_TYPE
  |   li TMP2, -8
  |  xori AT, TMP0, FRAME_C
  |   and TMP2, PC, TMP2
  |  bnez AT, ->vm_returnp
  |.  subu TMP2, BASE, TMP2		// TMP2 = previous base.
  |
  |  addiu TMP1, RD, -8
  |   sw TMP2, L->base
  |    li_vmstate C
  |   lw TMP2, SAVE_NRES
  |   addiu BASE, BASE, -8
  |    st_vmstate
  |  beqz TMP1, >2
  |.   sll TMP2, TMP2, 3
  |1:
  |  addiu TMP1, TMP1, -8
  |   lw SFRETHI, HI(RA)
  |    lw SFRETLO, LO(RA)
  |    addiu RA, RA, 8
  |   sw SFRETHI, HI(BASE)
  |    sw SFRETLO, LO(BASE)
  |  bnez TMP1, <1
  |.  addiu BASE, BASE, 8
  |
  |2:
  |  bne TMP2, RD, >6
  |3:
  |.  sw BASE, L->top			// Store new top.
  |
  |->vm_leave_cp:
  |  lw TMP0, SAVE_CFRAME		// Restore previous C frame.
  |   move CRET1, r0			// Ok return status for vm_pcall.
  |  sw TMP0, L->cframe
  |
  |->vm_leave_unw:
  |  restoreregs_ret
  |
  |6:
  |  lw TMP1, L->maxstack
  |  slt AT, TMP2, RD
  |  bnez AT, >7			// Less results wanted?
  |  // More results wanted. Check stack size and fill up results with nil.
  |.  slt AT, BASE, TMP1
  |  beqz AT, >8
  |.  nop
  |  sw TISNIL, HI(BASE)
  |  addiu RD, RD, 8
  |  b <2
  |.  addiu BASE, BASE, 8
  |
  |7:  // Less results wanted.
  |  subu TMP0, RD, TMP2
  |  subu TMP0, BASE, TMP0		// Either keep top or shrink it.
  |  b <3
  |.  movn BASE, TMP0, TMP2		// LUA_MULTRET+1 case?
  |
  |8:  // Corner case: need to grow stack for filling up results.
  |  // This can happen if:
  |  // - A C function grows the stack (a lot).
  |  // - The GC shrinks the stack in between.
  |  // - A return back from a lua_call() with (high) nresults adjustment.
  |  load_got lj_state_growstack
  |   move MULTRES, RD
  |  srl CARG2, TMP2, 3
  |  call_intern lj_state_growstack	// (lua_State *L, int n)
  |.  move CARG1, L
  |    lw TMP2, SAVE_NRES
  |  lw BASE, L->top			// Need the (realloced) L->top in BASE.
  |   move RD, MULTRES
  |  b <2
  |.   sll TMP2, TMP2, 3
  |
  |->vm_unwind_c:			// Unwind C stack, return from vm_pcall.
  |  // (void *cframe, int errcode)
  |  move sp, CARG1
  |  move CRET1, CARG2
  |->vm_unwind_c_eh:			// Landing pad for external unwinder.
  |  lw L, SAVE_L
  |   li TMP0, ~LJ_VMST_C
  |  lw GL:TMP1, L->glref
  |  b ->vm_leave_unw
  |.  sw TMP0, GL:TMP1->vmstate
  |
  |->vm_unwind_ff:			// Unwind C stack, return from ff pcall.
  |  // (void *cframe)
  |  li AT, -4
  |  and sp, CARG1, AT
  |->vm_unwind_ff_eh:			// Landing pad for external unwinder.
  |  lw L, SAVE_L
  |     .FPU lui TMP3, 0x59c0		// TOBIT = 2^52 + 2^51 (float).
  |     li TISNUM, LJ_TISNUM		// Setup type comparison constants.
  |     li TISNIL, LJ_TNIL
  |  lw BASE, L->base
  |   lw DISPATCH, L->glref		// Setup pointer to dispatch table.
  |     .FPU mtc1 TMP3, TOBIT
  |  li TMP1, LJ_TFALSE
  |    li_vmstate INTERP
  |  lw PC, FRAME_PC(BASE)		// Fetch PC of previous frame.
  |     .FPU cvt.d.s TOBIT, TOBIT
  |  addiu RA, BASE, -8			// Results start at BASE-8.
  |   addiu DISPATCH, DISPATCH, GG_G2DISP
  |  sw TMP1, HI(RA)			// Prepend false to error message.
  |    st_vmstate
  |  b ->vm_returnc
  |.  li RD, 16				// 2 results: false + error message.
  |
  |->vm_unwind_stub:			// Jump to exit stub from unwinder.
  |  jr CARG1
  |.  move ra, CARG2
  |
  |//-----------------------------------------------------------------------
  |//-- Grow stack for calls -----------------------------------------------
  |//-----------------------------------------------------------------------
  |
  |->vm_growstack_c:			// Grow stack for C function.
  |  b >2
  |.  li CARG2, LUA_MINSTACK
  |
  |->vm_growstack_l:			// Grow stack for Lua function.
  |  // BASE = new base, RA = BASE+framesize*8, RC = nargs*8, PC = first PC
  |  addu RC, BASE, RC
  |   subu RA, RA, BASE
  |  sw BASE, L->base
  |   addiu PC, PC, 4			// Must point after first instruction.
  |  sw RC, L->top
  |   srl CARG2, RA, 3
  |2:
  |  // L->base = new base, L->top = top
  |  load_got lj_state_growstack
  |   sw PC, SAVE_PC
  |  call_intern lj_state_growstack	// (lua_State *L, int n)
  |.  move CARG1, L
  |  lw BASE, L->base
  |  lw RC, L->top
  |  lw LFUNC:RB, FRAME_FUNC(BASE)
  |  subu RC, RC, BASE
  |  // BASE = new base, RB = LFUNC/CFUNC, RC = nargs*8, FRAME_PC(BASE) = PC
  |  ins_callt				// Just retry the call.
  |
  |//-----------------------------------------------------------------------
  |//-- Entry points into the assembler VM ---------------------------------
  |//-----------------------------------------------------------------------
  |
  |->vm_resume:				// Setup C frame and resume thread.
  |  // (lua_State *L, TValue *base, int nres1 = 0, ptrdiff_t ef = 0)
  |  saveregs
  |  move L, CARG1
  |    lw DISPATCH, L->glref		// Setup pointer to dispatch table.
  |  move BASE, CARG2
  |    lbu TMP1, L->status
  |   sw L, SAVE_L
  |  li PC, FRAME_CP
  |  addiu TMP0, sp, CFRAME_RESUME
  |    addiu DISPATCH, DISPATCH, GG_G2DISP
  |   sw r0, SAVE_NRES
  |   sw r0, SAVE_ERRF
  |   sw CARG1, SAVE_PC		// Any value outside of bytecode is ok.
  |   sw r0, SAVE_CFRAME
  |    beqz TMP1, >3
  |. sw TMP0, L->cframe
  |
  |  // Resume after yield (like a return).
  |  sw L, DISPATCH_GL(cur_L)(DISPATCH)
  |  move RA, BASE
  |   lw BASE, L->base
  |     li TISNUM, LJ_TISNUM		// Setup type comparison constants.
  |   lw TMP1, L->top
  |  lw PC, FRAME_PC(BASE)
  |     .FPU  lui TMP3, 0x59c0		// TOBIT = 2^52 + 2^51 (float).
  |   subu RD, TMP1, BASE
  |     .FPU  mtc1 TMP3, TOBIT
  |    sb r0, L->status
  |     .FPU  cvt.d.s TOBIT, TOBIT
  |    li_vmstate INTERP
  |   addiu RD, RD, 8
  |    st_vmstate
  |   move MULTRES, RD
  |  andi TMP0, PC, FRAME_TYPE
  |  beqz TMP0, ->BC_RET_Z
  |.    li TISNIL, LJ_TNIL
  |  b ->vm_return
  |.  nop
  |
  |->vm_pcall:				// Setup protected C frame and enter VM.
  |  // (lua_State *L, TValue *base, int nres1, ptrdiff_t ef)
  |  saveregs
  |  sw CARG4, SAVE_ERRF
  |  b >1
  |.  li PC, FRAME_CP
  |
  |->vm_call:				// Setup C frame and enter VM.
  |  // (lua_State *L, TValue *base, int nres1)
  |  saveregs
  |  li PC, FRAME_C
  |
  |1:  // Entry point for vm_pcall above (PC = ftype).
  |  lw TMP1, L:CARG1->cframe
  |    move L, CARG1
  |   sw CARG3, SAVE_NRES
  |    lw DISPATCH, L->glref		// Setup pointer to dispatch table.
  |   sw CARG1, SAVE_L
  |     move BASE, CARG2
  |    addiu DISPATCH, DISPATCH, GG_G2DISP
  |   sw CARG1, SAVE_PC		// Any value outside of bytecode is ok.
  |  sw TMP1, SAVE_CFRAME
  |  sw sp, L->cframe			// Add our C frame to cframe chain.
  |
  |3:  // Entry point for vm_cpcall/vm_resume (BASE = base, PC = ftype).
  |  sw L, DISPATCH_GL(cur_L)(DISPATCH)
  |  lw TMP2, L->base			// TMP2 = old base (used in vmeta_call).
  |     li TISNUM, LJ_TISNUM		// Setup type comparison constants.
  |     .FPU lui TMP3, 0x59c0		// TOBIT = 2^52 + 2^51 (float).
  |   lw TMP1, L->top
  |     .FPU mtc1 TMP3, TOBIT
  |  addu PC, PC, BASE
  |   subu NARGS8:RC, TMP1, BASE
  |  subu PC, PC, TMP2			// PC = frame delta + frame type
  |     .FPU cvt.d.s TOBIT, TOBIT
  |    li_vmstate INTERP
  |     li TISNIL, LJ_TNIL
  |    st_vmstate
  |
  |->vm_call_dispatch:
  |  // TMP2 = old base, BASE = new base, RC = nargs*8, PC = caller PC
  |  lw TMP0, FRAME_PC(BASE)
  |  li AT, LJ_TFUNC
  |  bne TMP0, AT, ->vmeta_call
  |.  lw LFUNC:RB, FRAME_FUNC(BASE)
  |
  |->vm_call_dispatch_f:
  |  ins_call
  |  // BASE = new base, RB = func, RC = nargs*8, PC = caller PC
  |
  |->vm_cpcall:				// Setup protected C frame, call C.
  |  // (lua_State *L, lua_CFunction func, void *ud, lua_CPFunction cp)
  |  saveregs
  |  move L, CARG1
  |   lw TMP0, L:CARG1->stack
  |  sw CARG1, SAVE_L
  |   lw TMP1, L->top
  |     lw DISPATCH, L->glref		// Setup pointer to dispatch table.
  |  sw CARG1, SAVE_PC			// Any value outside of bytecode is ok.
  |   subu TMP0, TMP0, TMP1		// Compute -savestack(L, L->top).
  |    lw TMP1, L->cframe
  |     addiu DISPATCH, DISPATCH, GG_G2DISP
  |   sw TMP0, SAVE_NRES		// Neg. delta means cframe w/o frame.
  |  sw r0, SAVE_ERRF			// No error function.
  |    sw TMP1, SAVE_CFRAME
  |    sw sp, L->cframe			// Add our C frame to cframe chain.
  |     sw L, DISPATCH_GL(cur_L)(DISPATCH)
  |  jalr CARG4			// (lua_State *L, lua_CFunction func, void *ud)
  |.  move CFUNCADDR, CARG4
  |  move BASE, CRET1
  |  bnez CRET1, <3			// Else continue with the call.
  |.  li PC, FRAME_CP
  |  b ->vm_leave_cp			// No base? Just remove C frame.
  |.  nop
  |
  |//-----------------------------------------------------------------------
  |//-- Metamethod handling ------------------------------------------------
  |//-----------------------------------------------------------------------
  |
  |// The lj_meta_* functions (except for lj_meta_cat) don't reallocate the
  |// stack, so BASE doesn't need to be reloaded across these calls.
  |
  |//-- Continuation dispatch ----------------------------------------------
  |
  |->cont_dispatch:
  |  // BASE = meta base, RA = resultptr, RD = (nresults+1)*8
  |  lw TMP0, -16+LO(BASE)		// Continuation.
  |   move RB, BASE
  |   move BASE, TMP2			// Restore caller BASE.
  |    lw LFUNC:TMP1, FRAME_FUNC(TMP2)
  |.if FFI
  |  sltiu AT, TMP0, 2
  |.endif
  |     lw PC, -16+HI(RB)		// Restore PC from [cont|PC].
  |   addu TMP2, RA, RD
  |.if FFI
  |  bnez AT, >1
  |.endif
  |.  sw TISNIL, -8+HI(TMP2)		// Ensure one valid arg.
  |    lw TMP1, LFUNC:TMP1->pc
  |  // BASE = base, RA = resultptr, RB = meta base
  |  jr TMP0				// Jump to continuation.
  |.  lw KBASE, PC2PROTO(k)(TMP1)
  |
  |.if FFI
  |1:
  |  bnez TMP0, ->cont_ffi_callback	// cont = 1: return from FFI callback.
  |  // cont = 0: tailcall from C function.
  |.  addiu TMP1, RB, -16
  |  b ->vm_call_tail
  |.  subu RC, TMP1, BASE
  |.endif
  |
  |->cont_cat:				// RA = resultptr, RB = meta base
  |  lw INS, -4(PC)
  |   addiu CARG2, RB, -16
  |  lw SFRETHI, HI(RA)
  |    lw SFRETLO, LO(RA)
  |  decode_RB8a MULTRES, INS
  |   decode_RA8a RA, INS
  |  decode_RB8b MULTRES
  |   decode_RA8b RA
  |  addu TMP1, BASE, MULTRES
  |   sw BASE, L->base
  |   subu CARG3, CARG2, TMP1
  |  sw SFRETHI, HI(CARG2)
  |  bne TMP1, CARG2, ->BC_CAT_Z
  |.  sw SFRETLO, LO(CARG2)
  |  addu RA, BASE, RA
  |  sw SFRETHI, HI(RA)
  |  b ->cont_nop
  |.  sw SFRETLO, LO(RA)
  |
  |//-- Table indexing metamethods -----------------------------------------
  |
  |->vmeta_tgets1:
  |  addiu CARG3, DISPATCH, DISPATCH_GL(tmptv)
  |  li TMP0, LJ_TSTR
  |  sw STR:RC, LO(CARG3)
  |  b >1
  |.  sw TMP0, HI(CARG3)
  |
  |->vmeta_tgets:
  |  addiu CARG2, DISPATCH, DISPATCH_GL(tmptv)
  |  li TMP0, LJ_TTAB
  |  sw TAB:RB, LO(CARG2)
  |   addiu CARG3, DISPATCH, DISPATCH_GL(tmptv2)
  |  sw TMP0, HI(CARG2)
  |   li TMP1, LJ_TSTR
  |   sw STR:RC, LO(CARG3)
  |  b >1
  |.  sw TMP1, HI(CARG3)
  |
  |->vmeta_tgetb:			// TMP0 = index
  |  addiu CARG3, DISPATCH, DISPATCH_GL(tmptv)
  |  sw TMP0, LO(CARG3)
  |  sw TISNUM, HI(CARG3)
  |
  |->vmeta_tgetv:
  |1:
  |  load_got lj_meta_tget
  |  sw BASE, L->base
  |  sw PC, SAVE_PC
  |  call_intern lj_meta_tget		// (lua_State *L, TValue *o, TValue *k)
  |.  move CARG1, L
  |  // Returns TValue * (finished) or NULL (metamethod).
  |  beqz CRET1, >3
  |.  addiu TMP1, BASE, -FRAME_CONT
  |  lw SFARG1HI, HI(CRET1)
  |   lw SFARG2HI, LO(CRET1)
  |  ins_next1
  |  sw SFARG1HI, HI(RA)
  |   sw SFARG2HI, LO(RA)
  |  ins_next2
  |
  |3:  // Call __index metamethod.
  |  // BASE = base, L->top = new base, stack = cont/func/t/k
  |  lw BASE, L->top
  |  sw PC, -16+HI(BASE)		// [cont|PC]
  |   subu PC, BASE, TMP1
  |  lw LFUNC:RB, FRAME_FUNC(BASE)	// Guaranteed to be a function here.
  |  b ->vm_call_dispatch_f
  |.  li NARGS8:RC, 16			// 2 args for func(t, k).
  |
  |->vmeta_tgetr:
  |  load_got lj_tab_getinth
  |  call_intern lj_tab_getinth		// (GCtab *t, int32_t key)
  |.  nop
  |  // Returns cTValue * or NULL.
  |  beqz CRET1, ->BC_TGETR_Z
  |.  move SFARG2HI, TISNIL
  |  lw SFARG2HI, HI(CRET1)
  |  b ->BC_TGETR_Z
  |.  lw SFARG2LO, LO(CRET1)
  |
  |//-----------------------------------------------------------------------
  |
  |->vmeta_tsets1:
  |  addiu CARG3, DISPATCH, DISPATCH_GL(tmptv)
  |  li TMP0, LJ_TSTR
  |  sw STR:RC, LO(CARG3)
  |  b >1
  |.  sw TMP0, HI(CARG3)
  |
  |->vmeta_tsets:
  |  addiu CARG2, DISPATCH, DISPATCH_GL(tmptv)
  |  li TMP0, LJ_TTAB
  |  sw TAB:RB, LO(CARG2)
  |   addiu CARG3, DISPATCH, DISPATCH_GL(tmptv2)
  |  sw TMP0, HI(CARG2)
  |   li TMP1, LJ_TSTR
  |   sw STR:RC, LO(CARG3)
  |  b >1
  |.  sw TMP1, HI(CARG3)
  |
  |->vmeta_tsetb:			// TMP0 = index
  |  addiu CARG3, DISPATCH, DISPATCH_GL(tmptv)
  |  sw TMP0, LO(CARG3)
  |  sw TISNUM, HI(CARG3)
  |
  |->vmeta_tsetv:
  |1:
  |  load_got lj_meta_tset
  |  sw BASE, L->base
  |  sw PC, SAVE_PC
  |  call_intern lj_meta_tset		// (lua_State *L, TValue *o, TValue *k)
  |.  move CARG1, L
  |  // Returns TValue * (finished) or NULL (metamethod).
  |  lw SFARG1HI, HI(RA)
  |  beqz CRET1, >3
  |.  lw SFARG1LO, LO(RA)
  |  // NOBARRIER: lj_meta_tset ensures the table is not black.
  |  ins_next1
  |  sw SFARG1HI, HI(CRET1)
  |   sw SFARG1LO, LO(CRET1)
  |  ins_next2
  |
  |3:  // Call __newindex metamethod.
  |  // BASE = base, L->top = new base, stack = cont/func/t/k/(v)
  |  addiu TMP1, BASE, -FRAME_CONT
  |  lw BASE, L->top
  |  sw PC, -16+HI(BASE)		// [cont|PC]
  |   subu PC, BASE, TMP1
  |  lw LFUNC:RB, FRAME_FUNC(BASE)	// Guaranteed to be a function here.
  |  sw SFARG1HI, 16+HI(BASE)		// Copy value to third argument.
  |   sw SFARG1LO, 16+LO(BASE)
  |  b ->vm_call_dispatch_f
  |.  li NARGS8:RC, 24			// 3 args for func(t, k, v)
  |
  |->vmeta_tsetr:
  |  load_got lj_tab_setinth
  |  sw BASE, L->base
  |  sw PC, SAVE_PC
  |  call_intern lj_tab_setinth  // (lua_State *L, GCtab *t, int32_t key)
  |.  move CARG1, L
  |  // Returns TValue *.
  |  b ->BC_TSETR_Z
  |.  nop
  |
  |//-- Comparison metamethods ---------------------------------------------
  |
  |->vmeta_comp:
  |  // RA/RD point to o1/o2.
  |  move CARG2, RA
  |  move CARG3, RD
  |  load_got lj_meta_comp
  |  addiu PC, PC, -4
  |  sw BASE, L->base
  |  sw PC, SAVE_PC
  |  decode_OP1 CARG4, INS
  |  call_intern lj_meta_comp	// (lua_State *L, TValue *o1, *o2, int op)
  |.  move CARG1, L
  |  // Returns 0/1 or TValue * (metamethod).
  |3:
  |  sltiu AT, CRET1, 2
  |  beqz AT, ->vmeta_binop
  |   negu TMP2, CRET1
  |4:
  |  lhu RD, OFS_RD(PC)
  |   addiu PC, PC, 4
  |   lui TMP1, (-(BCBIAS_J*4 >> 16) & 65535)
  |  sll RD, RD, 2
  |  addu RD, RD, TMP1
  |  and RD, RD, TMP2
  |  addu PC, PC, RD
  |->cont_nop:
  |  ins_next
  |
  |->cont_ra:				// RA = resultptr
  |  lbu TMP1, -4+OFS_RA(PC)
  |   lw SFRETHI, HI(RA)
  |    lw SFRETLO, LO(RA)
  |  sll TMP1, TMP1, 3
  |  addu TMP1, BASE, TMP1
  |   sw SFRETHI, HI(TMP1)
  |  b ->cont_nop
  |.   sw SFRETLO, LO(TMP1)
  |
  |->cont_condt:			// RA = resultptr
  |  lw TMP0, HI(RA)
  |  sltiu AT, TMP0, LJ_TISTRUECOND
  |  b <4
  |.  negu TMP2, AT			// Branch if result is true.
  |
  |->cont_condf:			// RA = resultptr
  |  lw TMP0, HI(RA)
  |  sltiu AT, TMP0, LJ_TISTRUECOND
  |  b <4
  |.  addiu TMP2, AT, -1		// Branch if result is false.
  |
  |->vmeta_equal:
  |  // SFARG1LO/SFARG2LO point to o1/o2. TMP0 is set to 0/1.
  |  load_got lj_meta_equal
  |   move CARG2, SFARG1LO
  |   move CARG3, SFARG2LO
  |   move CARG4, TMP0
  |  addiu PC, PC, -4
  |   sw BASE, L->base
  |   sw PC, SAVE_PC
  |  call_intern lj_meta_equal  // (lua_State *L, GCobj *o1, *o2, int ne)
  |.  move CARG1, L
  |  // Returns 0/1 or TValue * (metamethod).
  |  b <3
  |.  nop
  |
  |->vmeta_equal_cd:
  |.if FFI
  |  load_got lj_meta_equal_cd
  |  move CARG2, INS
  |  addiu PC, PC, -4
  |   sw BASE, L->base
  |   sw PC, SAVE_PC
  |  call_intern lj_meta_equal_cd	// (lua_State *L, BCIns op)
  |.  move CARG1, L
  |  // Returns 0/1 or TValue * (metamethod).
  |  b <3
  |.  nop
  |.endif
  |
  |->vmeta_istype:
  |  load_got lj_meta_istype
  |  addiu PC, PC, -4
  |   sw BASE, L->base
  |   srl CARG2, RA, 3
  |   srl CARG3, RD, 3
  |  sw PC, SAVE_PC
  |  call_intern lj_meta_istype  // (lua_State *L, BCReg ra, BCReg tp)
  |.  move CARG1, L
  |  b ->cont_nop
  |.  nop
  |
  |//-- Arithmetic metamethods ---------------------------------------------
  |
  |->vmeta_unm:
  |  move RC, RB
  |
  |->vmeta_arith:
  |  load_got lj_meta_arith
  |  decode_OP1 TMP0, INS
  |   sw BASE, L->base
  |  move CARG2, RA
  |   sw PC, SAVE_PC
  |  move CARG3, RB
  |  move CARG4, RC
  |  sw TMP0, ARG5
  |  call_intern lj_meta_arith  // (lua_State *L, TValue *ra,*rb,*rc, BCReg op)
  |.  move CARG1, L
  |  // Returns NULL (finished) or TValue * (metamethod).
  |  beqz CRET1, ->cont_nop
  |.  nop
  |
  |  // Call metamethod for binary op.
  |->vmeta_binop:
  |  // BASE = old base, CRET1 = new base, stack = cont/func/o1/o2
  |  subu TMP1, CRET1, BASE
  |   sw PC, -16+HI(CRET1)		// [cont|PC]
  |   move TMP2, BASE
  |  addiu PC, TMP1, FRAME_CONT
  |   move BASE, CRET1
  |  b ->vm_call_dispatch
  |.  li NARGS8:RC, 16			// 2 args for func(o1, o2).
  |
  |->vmeta_len:
  |  // CARG2 already set by BC_LEN.
#if LJ_52
  |  move MULTRES, CARG1
#endif
  |  load_got lj_meta_len
  |   sw BASE, L->base
  |   sw PC, SAVE_PC
  |  call_intern lj_meta_len		// (lua_State *L, TValue *o)
  |.  move CARG1, L
  |  // Returns NULL (retry) or TValue * (metamethod base).
#if LJ_52
  |  bnez CRET1, ->vmeta_binop		// Binop call for compatibility.
  |.  nop
  |  b ->BC_LEN_Z
  |.  move CARG1, MULTRES
#else
  |  b ->vmeta_binop			// Binop call for compatibility.
  |.  nop
#endif
  |
  |//-- Call metamethod ----------------------------------------------------
  |
  |->vmeta_call:			// Resolve and call __call metamethod.
  |  // TMP2 = old base, BASE = new base, RC = nargs*8
  |  load_got lj_meta_call
  |   sw TMP2, L->base			// This is the callers base!
  |  addiu CARG2, BASE, -8
  |   sw PC, SAVE_PC
  |  addu CARG3, BASE, RC
  |   move MULTRES, NARGS8:RC
  |  call_intern lj_meta_call	// (lua_State *L, TValue *func, TValue *top)
  |.  move CARG1, L
  |  lw LFUNC:RB, FRAME_FUNC(BASE)	// Guaranteed to be a function here.
  |   addiu NARGS8:RC, MULTRES, 8	// Got one more argument now.
  |  ins_call
  |
  |->vmeta_callt:			// Resolve __call for BC_CALLT.
  |  // BASE = old base, RA = new base, RC = nargs*8
  |  load_got lj_meta_call
  |   sw BASE, L->base
  |  addiu CARG2, RA, -8
  |   sw PC, SAVE_PC
  |  addu CARG3, RA, RC
  |   move MULTRES, NARGS8:RC
  |  call_intern lj_meta_call	// (lua_State *L, TValue *func, TValue *top)
  |.  move CARG1, L
  |  lw TMP1, FRAME_PC(BASE)
  |   lw LFUNC:RB, FRAME_FUNC(RA)	// Guaranteed to be a function here.
  |  b ->BC_CALLT_Z
  |.  addiu NARGS8:RC, MULTRES, 8	// Got one more argument now.
  |
  |//-- Argument coercion for 'for' statement ------------------------------
  |
  |->vmeta_for:
  |  load_got lj_meta_for
  |   sw BASE, L->base
  |  move CARG2, RA
  |   sw PC, SAVE_PC
  |  move MULTRES, INS
  |  call_intern lj_meta_for	// (lua_State *L, TValue *base)
  |.  move CARG1, L
  |.if JIT
  |  decode_OP1 TMP0, MULTRES
  |  li AT, BC_JFORI
  |.endif
  |  decode_RA8a RA, MULTRES
  |   decode_RD8a RD, MULTRES
  |  decode_RA8b RA
  |.if JIT
  |  beq TMP0, AT, =>BC_JFORI
  |.  decode_RD8b RD
  |  b =>BC_FORI
  |.  nop
  |.else
  |  b =>BC_FORI
  |.  decode_RD8b RD
  |.endif
  |
  |//-----------------------------------------------------------------------
  |//-- Fast functions -----------------------------------------------------
  |//-----------------------------------------------------------------------
  |
  |.macro .ffunc, name
  |->ff_ .. name:
  |.endmacro
  |
  |.macro .ffunc_1, name
  |->ff_ .. name:
  |  lw SFARG1HI, HI(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  lw SFARG1LO, LO(BASE)
  |.endmacro
  |
  |.macro .ffunc_2, name
  |->ff_ .. name:
  |  sltiu AT, NARGS8:RC, 16
  |   lw SFARG1HI, HI(BASE)
  |  bnez AT, ->fff_fallback
  |.   lw SFARG2HI, 8+HI(BASE)
  |   lw SFARG1LO, LO(BASE)
  |    lw SFARG2LO, 8+LO(BASE)
  |.endmacro
  |
  |.macro .ffunc_n, name	// Caveat: has delay slot!
  |->ff_ .. name:
  |  lw SFARG1HI, HI(BASE)
  |.if FPU
  |   ldc1 FARG1, 0(BASE)
  |.else
  |   lw SFARG1LO, LO(BASE)
  |.endif
  |  beqz NARGS8:RC, ->fff_fallback
  |.  sltiu AT, SFARG1HI, LJ_TISNUM
  |  beqz AT, ->fff_fallback
  |.endmacro
  |
  |.macro .ffunc_nn, name	// Caveat: has delay slot!
  |->ff_ .. name:
  |  sltiu AT, NARGS8:RC, 16
  |   lw SFARG1HI, HI(BASE)
  |  bnez AT, ->fff_fallback
  |.  lw SFARG2HI, 8+HI(BASE)
  |  sltiu TMP0, SFARG1HI, LJ_TISNUM
  |.if FPU
  |   ldc1 FARG1, 0(BASE)
  |.else
  |   lw SFARG1LO, LO(BASE)
  |.endif
  |  sltiu TMP1, SFARG2HI, LJ_TISNUM
  |.if FPU
  |   ldc1 FARG2, 8(BASE)
  |.else
  |   lw SFARG2LO, 8+LO(BASE)
  |.endif
  |  and TMP0, TMP0, TMP1
  |  beqz TMP0, ->fff_fallback
  |.endmacro
  |
  |// Inlined GC threshold check. Caveat: uses TMP0 and TMP1 and has delay slot!
  |.macro ffgccheck
  |  lw TMP0, DISPATCH_GL(gc.total)(DISPATCH)
  |  lw TMP1, DISPATCH_GL(gc.threshold)(DISPATCH)
  |  subu AT, TMP0, TMP1
  |  bgezal AT, ->fff_gcstep
  |.endmacro
  |
  |//-- Base library: checks -----------------------------------------------
  |
  |.ffunc_1 assert
  |  sltiu AT, SFARG1HI, LJ_TISTRUECOND
  |  beqz AT, ->fff_fallback
  |.  addiu RA, BASE, -8
  |  lw PC, FRAME_PC(BASE)
  |  addiu RD, NARGS8:RC, 8		// Compute (nresults+1)*8.
  |  addu TMP2, RA, NARGS8:RC
  |   sw SFARG1HI, HI(RA)
  |  addiu TMP1, BASE, 8
  |  beq BASE, TMP2, ->fff_res		// Done if exactly 1 argument.
  |.  sw SFARG1LO, LO(RA)
  |1:
  |  lw SFRETHI, HI(TMP1)
  |   lw SFRETLO, LO(TMP1)
  |  sw SFRETHI, -8+HI(TMP1)
  |   sw SFRETLO, -8+LO(TMP1)
  |  bne TMP1, TMP2, <1
  |.  addiu TMP1, TMP1, 8
  |  b ->fff_res
  |.  nop
  |
  |.ffunc type
  |  lw SFARG1HI, HI(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  sltiu TMP0, SFARG1HI, LJ_TISNUM
  |  movn SFARG1HI, TISNUM, TMP0
  |  not TMP1, SFARG1HI
  |  sll TMP1, TMP1, 3
  |  addu TMP1, CFUNC:RB, TMP1
  |  lw SFARG1HI, CFUNC:TMP1->upvalue[0].u32.hi
  |  b ->fff_restv
  |.  lw SFARG1LO, CFUNC:TMP1->upvalue[0].u32.lo
  |
  |//-- Base library: getters and setters ---------------------------------
  |
  |.ffunc_1 getmetatable
  |  li AT, LJ_TTAB
  |  bne SFARG1HI, AT, >6
  |.  li AT, LJ_TUDATA
  |1:  // Field metatable must be at same offset for GCtab and GCudata!
  |  lw TAB:SFARG1LO, TAB:SFARG1LO->metatable
  |2:
  |  lw STR:RC, DISPATCH_GL(gcroot[GCROOT_MMNAME+MM_metatable])(DISPATCH)
  |  beqz TAB:SFARG1LO, ->fff_restv
  |.  li SFARG1HI, LJ_TNIL
  |  lw TMP0, TAB:SFARG1LO->hmask
  |   li SFARG1HI, LJ_TTAB		// Use metatable as default result.
  |  lw TMP1, STR:RC->sid
  |  lw NODE:TMP2, TAB:SFARG1LO->node
  |  and TMP1, TMP1, TMP0		// idx = str->sid & tab->hmask
  |  sll TMP0, TMP1, 5
  |  sll TMP1, TMP1, 3
  |  subu TMP1, TMP0, TMP1
  |  addu NODE:TMP2, NODE:TMP2, TMP1	// node = tab->node + (idx*32-idx*8)
  |  li AT, LJ_TSTR
  |3:  // Rearranged logic, because we expect _not_ to find the key.
  |  lw CARG4, offsetof(Node, key)+HI(NODE:TMP2)
  |   lw TMP0, offsetof(Node, key)+LO(NODE:TMP2)
  |    lw NODE:TMP3, NODE:TMP2->next
  |  bne CARG4, AT, >4
  |.    lw CARG3, offsetof(Node, val)+HI(NODE:TMP2)
  |  beq TMP0, STR:RC, >5
  |.    lw TMP1, offsetof(Node, val)+LO(NODE:TMP2)
  |4:
  |  beqz NODE:TMP3, ->fff_restv	// Not found, keep default result.
  |.  move NODE:TMP2, NODE:TMP3
  |  b <3
  |.  nop
  |5:
  |  beq CARG3, TISNIL, ->fff_restv	// Ditto for nil value.
  |.  nop
  |  move SFARG1HI, CARG3		// Return value of mt.__metatable.
  |  b ->fff_restv
  |.  move SFARG1LO, TMP1
  |
  |6:
  |  beq SFARG1HI, AT, <1
  |.  sltu AT, TISNUM, SFARG1HI
  |  movz SFARG1HI, TISNUM, AT
  |  not TMP1, SFARG1HI
  |  sll TMP1, TMP1, 2
  |  addu TMP1, DISPATCH, TMP1
  |  b <2
  |.  lw TAB:SFARG1LO, DISPATCH_GL(gcroot[GCROOT_BASEMT])(TMP1)
  |
  |.ffunc_2 setmetatable
  |  // Fast path: no mt for table yet and not clearing the mt.
  |  li AT, LJ_TTAB
  |  bne SFARG1HI, AT, ->fff_fallback
  |.  addiu SFARG2HI, SFARG2HI, -LJ_TTAB
  |  lw TAB:TMP1, TAB:SFARG1LO->metatable
  |   lbu TMP3, TAB:SFARG1LO->marked
  |  or AT, SFARG2HI, TAB:TMP1
  |  bnez AT, ->fff_fallback
  |.  andi AT, TMP3, LJ_GC_BLACK	// isblack(table)
  |  beqz AT, ->fff_restv
  |.  sw TAB:SFARG2LO, TAB:SFARG1LO->metatable
  |  barrierback TAB:SFARG1LO, TMP3, TMP0, ->fff_restv
  |
  |.ffunc rawget
  |  lw CARG4, HI(BASE)
  |   sltiu AT, NARGS8:RC, 16
  |    lw TAB:CARG2, LO(BASE)
  |  load_got lj_tab_get
  |  addiu CARG4, CARG4, -LJ_TTAB
  |  or AT, AT, CARG4
  |  bnez AT, ->fff_fallback
  |   addiu CARG3, BASE, 8
  |  call_intern lj_tab_get	// (lua_State *L, GCtab *t, cTValue *key)
  |.  move CARG1, L
  |  // Returns cTValue *.
  |  lw SFARG1HI, HI(CRET1)
  |  b ->fff_restv
  |.  lw SFARG1LO, LO(CRET1)
  |
  |//-- Base library: conversions ------------------------------------------
  |
  |.ffunc tonumber
  |  // Only handles the number case inline (without a base argument).
  |  lw CARG1, HI(BASE)
  |  xori AT, NARGS8:RC, 8		// Exactly one number argument.
  |  sltu TMP0, TISNUM, CARG1
  |  or AT, AT, TMP0
  |  bnez AT, ->fff_fallback
  |.  lw SFARG1HI, HI(BASE)
  |  b ->fff_restv
  |.  lw SFARG1LO, LO(BASE)
  |
  |.ffunc_1 tostring
  |  // Only handles the string or number case inline.
  |  li AT, LJ_TSTR
  |  // A __tostring method in the string base metatable is ignored.
  |  beq SFARG1HI, AT, ->fff_restv	// String key?
  |  // Handle numbers inline, unless a number base metatable is present.
  |.  lw TMP1, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM])(DISPATCH)
  |  sltu TMP0, TISNUM, SFARG1HI
  |  or TMP0, TMP0, TMP1
  |  bnez TMP0, ->fff_fallback
  |.  sw BASE, L->base			// Add frame since C call can throw.
  |  ffgccheck
  |.  sw PC, SAVE_PC			// Redundant (but a defined value).
  |  load_got lj_strfmt_number
  |  move CARG1, L
  |  call_intern lj_strfmt_number	// (lua_State *L, cTValue *o)
  |.  move CARG2, BASE
  |  // Returns GCstr *.
  |  li SFARG1HI, LJ_TSTR
  |  b ->fff_restv
  |.  move SFARG1LO, CRET1
  |
  |//-- Base library: iterators -------------------------------------------
  |
  |.ffunc next
  |  lw CARG2, HI(BASE)
  |   lw TAB:CARG1, LO(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  addu TMP2, BASE, NARGS8:RC
  |  li AT, LJ_TTAB
  |   sw TISNIL, HI(TMP2)		// Set missing 2nd arg to nil.
  |  bne CARG2, AT, ->fff_fallback
  |.  lw PC, FRAME_PC(BASE)
  |  load_got lj_tab_next
  |  addiu CARG2, BASE, 8
  |  call_intern lj_tab_next		// (GCtab *t, cTValue *key, TValue *o)
  |.  addiu CARG3, BASE, -8
  |  // Returns 1=found, 0=end, -1=error.
  |   addiu RA, BASE, -8
  |  bgtz CRET1, ->fff_res		// Found key/value.
  |.  li RD, (2+1)*8
  |  beqz CRET1, ->fff_restv		// End of traversal: return nil.
  |.  li SFARG1HI, LJ_TNIL
  |   lw CFUNC:RB, FRAME_FUNC(BASE)
  |  b ->fff_fallback			// Invalid key.
  |.  li RC, 2*8
  |
  |.ffunc_1 pairs
  |  li AT, LJ_TTAB
  |  bne SFARG1HI, AT, ->fff_fallback
  |.  lw PC, FRAME_PC(BASE)
#if LJ_52
  |  lw TAB:TMP2, TAB:SFARG1LO->metatable
  |  lw TMP0, CFUNC:RB->upvalue[0].u32.hi
  |   lw TMP1, CFUNC:RB->upvalue[0].u32.lo
  |  bnez TAB:TMP2, ->fff_fallback
#else
  |  lw TMP0, CFUNC:RB->upvalue[0].u32.hi
  |   lw TMP1, CFUNC:RB->upvalue[0].u32.lo
#endif
  |.  addiu RA, BASE, -8
  |   sw TISNIL, 8+HI(BASE)
  |  sw TMP0, HI(RA)
  |   sw TMP1, LO(RA)
  |  b ->fff_res
  |.  li RD, (3+1)*8
  |
  |.ffunc ipairs_aux
  |  sltiu AT, NARGS8:RC, 16
  |   lw CARG3, HI(BASE)
  |    lw TAB:CARG1, LO(BASE)
  |   lw CARG4, 8+HI(BASE)
  |  bnez AT, ->fff_fallback
  |.  addiu CARG3, CARG3, -LJ_TTAB
  |  xor CARG4, CARG4, TISNUM
  |  and AT, CARG3, CARG4
  |  bnez AT, ->fff_fallback
  |.  lw PC, FRAME_PC(BASE)
  |  lw TMP2, 8+LO(BASE)
  |   lw TMP0, TAB:CARG1->asize
  |   lw TMP1, TAB:CARG1->array
  |  addiu TMP2, TMP2, 1
  |  sw TISNUM, -8+HI(BASE)
  |  sltu AT, TMP2, TMP0
  |   sw TMP2, -8+LO(BASE)
  |  beqz AT, >2			// Not in array part?
  |.  addiu RA, BASE, -8
  |   sll TMP3, TMP2, 3
  |   addu TMP3, TMP1, TMP3
  |  lw TMP1, HI(TMP3)
  |   lw TMP2, LO(TMP3)
  |1:
  |  beq TMP1, TISNIL, ->fff_res	// End of iteration, return 0 results.
  |.  li RD, (0+1)*8
  |  sw TMP1, 8+HI(RA)
  |   sw TMP2, 8+LO(RA)
  |  b ->fff_res
  |.  li RD, (2+1)*8
  |
  |2:  // Check for empty hash part first. Otherwise call C function.
  |  lw TMP0, TAB:CARG1->hmask
  |  load_got lj_tab_getinth
  |  beqz TMP0, ->fff_res
  |.  li RD, (0+1)*8
  |  call_intern lj_tab_getinth		// (GCtab *t, int32_t key)
  |.  move CARG2, TMP2
  |  // Returns cTValue * or NULL.
  |  beqz CRET1, ->fff_res
  |.  li RD, (0+1)*8
  |  lw TMP1, HI(CRET1)
  |  b <1
  |.  lw TMP2, LO(CRET1)
  |
  |.ffunc_1 ipairs
  |  li AT, LJ_TTAB
  |  bne SFARG1HI, AT, ->fff_fallback
  |.  lw PC, FRAME_PC(BASE)
#if LJ_52
  |  lw TAB:TMP2, TAB:SFARG1LO->metatable
  |  lw TMP0, CFUNC:RB->upvalue[0].u32.hi
  |   lw TMP1, CFUNC:RB->upvalue[0].u32.lo
  |  bnez TAB:TMP2, ->fff_fallback
#else
  |  lw TMP0, CFUNC:RB->upvalue[0].u32.hi
  |   lw TMP1, CFUNC:RB->upvalue[0].u32.lo
#endif
  |.  addiu RA, BASE, -8
  |   sw TISNUM, 8+HI(BASE)
  |   sw r0, 8+LO(BASE)
  |  sw TMP0, HI(RA)
  |   sw TMP1, LO(RA)
  |  b ->fff_res
  |.  li RD, (3+1)*8
  |
  |//-- Base library: catch errors ----------------------------------------
  |
  |.ffunc pcall
  |  lbu TMP3, DISPATCH_GL(hookmask)(DISPATCH)
  |  beqz NARGS8:RC, ->fff_fallback
  |   move TMP2, BASE
  |   addiu BASE, BASE, 8
  |  // Remember active hook before pcall.
  |  srl TMP3, TMP3, HOOK_ACTIVE_SHIFT
  |  andi TMP3, TMP3, 1
  |  addiu PC, TMP3, 8+FRAME_PCALL
  |  b ->vm_call_dispatch
  |.  addiu NARGS8:RC, NARGS8:RC, -8
  |
  |.ffunc xpcall
  |    sltiu AT, NARGS8:RC, 16
  |  lw CARG4, 8+HI(BASE)
  |    bnez AT, ->fff_fallback
  |.  lw CARG3, 8+LO(BASE)
  |   lw CARG1, LO(BASE)
  |    lw CARG2, HI(BASE)
  |    lbu TMP1, DISPATCH_GL(hookmask)(DISPATCH)
  |  li AT, LJ_TFUNC
  |   move TMP2, BASE
  |  bne CARG4, AT, ->fff_fallback  // Traceback must be a function.
  |   addiu BASE, BASE, 16
  |  // Remember active hook before pcall.
  |  srl TMP3, TMP3, HOOK_ACTIVE_SHIFT
  |   sw CARG3, LO(TMP2)	// Swap function and traceback.
  |   sw CARG4, HI(TMP2)
  |  andi TMP3, TMP3, 1
  |   sw CARG1, 8+LO(TMP2)
  |    sw CARG2, 8+HI(TMP2)
  |  addiu PC, TMP3, 16+FRAME_PCALL
  |  b ->vm_call_dispatch
  |.  addiu NARGS8:RC, NARGS8:RC, -16
  |
  |//-- Coroutine library --------------------------------------------------
  |
  |.macro coroutine_resume_wrap, resume
  |.if resume
  |.ffunc coroutine_resume
  |  lw CARG3, HI(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  lw CARG1, LO(BASE)
  |  li AT, LJ_TTHREAD
  |  bne CARG3, AT, ->fff_fallback
  |.else
  |.ffunc coroutine_wrap_aux
  |  lw L:CARG1, CFUNC:RB->upvalue[0].gcr
  |.endif
  |  lbu TMP0, L:CARG1->status
  |   lw TMP1, L:CARG1->cframe
  |    lw CARG2, L:CARG1->top
  |    lw TMP2, L:CARG1->base
  |  addiu TMP3, TMP0, -LUA_YIELD
  |  bgtz TMP3, ->fff_fallback		// st > LUA_YIELD?
  |.   xor TMP2, TMP2, CARG2
  |  bnez TMP1, ->fff_fallback		// cframe != 0?
  |.  or AT, TMP2, TMP0
  |  lw TMP0, L:CARG1->maxstack
  |  beqz AT, ->fff_fallback		// base == top && st == 0?
  |.  lw PC, FRAME_PC(BASE)
  |  addu TMP2, CARG2, NARGS8:RC
  |  sltu AT, TMP0, TMP2
  |  bnez AT, ->fff_fallback		// Stack overflow?
  |.  sw PC, SAVE_PC
  |   sw BASE, L->base
  |1:
  |.if resume
  |  addiu BASE, BASE, 8		// Keep resumed thread in stack for GC.
  |  addiu NARGS8:RC, NARGS8:RC, -8
  |  addiu TMP2, TMP2, -8
  |.endif
  |  sw TMP2, L:CARG1->top
  |  addu TMP1, BASE, NARGS8:RC
  |  move CARG3, CARG2
  |  sw BASE, L->top
  |2:  // Move args to coroutine.
  |   lw SFRETHI, HI(BASE)
  |    lw SFRETLO, LO(BASE)
  |  sltu AT, BASE, TMP1
  |  beqz AT, >3
  |.  addiu BASE, BASE, 8
  |   sw SFRETHI, HI(CARG3)
  |    sw SFRETLO, LO(CARG3)
  |  b <2
  |.  addiu CARG3, CARG3, 8
  |3:
  |  bal ->vm_resume			// (lua_State *L, TValue *base, 0, 0)
  |.  move L:RA, L:CARG1
  |  // Returns thread status.
  |4:
  |  lw TMP2, L:RA->base
  |   sltiu AT, CRET1, LUA_YIELD+1
  |  lw TMP3, L:RA->top
  |    li_vmstate INTERP
  |  lw BASE, L->base
  |    sw L, DISPATCH_GL(cur_L)(DISPATCH)
  |    st_vmstate
  |   beqz AT, >8
  |. subu RD, TMP3, TMP2
  |   lw TMP0, L->maxstack
  |  beqz RD, >6			// No results?
  |.  addu TMP1, BASE, RD
  |  sltu AT, TMP0, TMP1
  |  bnez AT, >9			// Need to grow stack?
  |.  addu TMP3, TMP2, RD
  |  sw TMP2, L:RA->top			// Clear coroutine stack.
  |  move TMP1, BASE
  |5:  // Move results from coroutine.
  |   lw SFRETHI, HI(TMP2)
  |    lw SFRETLO, LO(TMP2)
  |  addiu TMP2, TMP2, 8
  |  sltu AT, TMP2, TMP3
  |   sw SFRETHI, HI(TMP1)
  |    sw SFRETLO, LO(TMP1)
  |  bnez AT, <5
  |.  addiu TMP1, TMP1, 8
  |6:
  |  andi TMP0, PC, FRAME_TYPE
  |.if resume
  |  li TMP1, LJ_TTRUE
  |   addiu RA, BASE, -8
  |  sw TMP1, -8+HI(BASE)		// Prepend true to results.
  |  addiu RD, RD, 16
  |.else
  |  move RA, BASE
  |  addiu RD, RD, 8
  |.endif
  |7:
  |  sw PC, SAVE_PC
  |  beqz TMP0, ->BC_RET_Z
  |.  move MULTRES, RD
  |  b ->vm_return
  |.  nop
  |
  |8:  // Coroutine returned with error (at co->top-1).
  |.if resume
  |  addiu TMP3, TMP3, -8
  |   li TMP1, LJ_TFALSE
  |  lw SFRETHI, HI(TMP3)
  |   lw SFRETLO, LO(TMP3)
  |   sw TMP3, L:RA->top		// Remove error from coroutine stack.
  |    li RD, (2+1)*8
  |   sw TMP1, -8+HI(BASE)		// Prepend false to results.
  |    addiu RA, BASE, -8
  |  sw SFRETHI, HI(BASE)		// Copy error message.
  |   sw SFRETLO, LO(BASE)
  |  b <7
  |.  andi TMP0, PC, FRAME_TYPE
  |.else
  |  load_got lj_ffh_coroutine_wrap_err
  |  move CARG2, L:RA
  |  call_intern lj_ffh_coroutine_wrap_err  // (lua_State *L, lua_State *co)
  |.  move CARG1, L
  |.endif
  |
  |9:  // Handle stack expansion on return from yield.
  |  load_got lj_state_growstack
  |  srl CARG2, RD, 3
  |  call_intern lj_state_growstack	// (lua_State *L, int n)
  |.  move CARG1, L
  |  b <4
  |.  li CRET1, 0
  |.endmacro
  |
  |  coroutine_resume_wrap 1		// coroutine.resume
  |  coroutine_resume_wrap 0		// coroutine.wrap
  |
  |.ffunc coroutine_yield
  |  lw TMP0, L->cframe
  |   addu TMP1, BASE, NARGS8:RC
  |   sw BASE, L->base
  |  andi TMP0, TMP0, CFRAME_RESUME
  |   sw TMP1, L->top
  |  beqz TMP0, ->fff_fallback
  |.   li CRET1, LUA_YIELD
  |  sw r0, L->cframe
  |  b ->vm_leave_unw
  |.   sb CRET1, L->status
  |
  |//-- Math library -------------------------------------------------------
  |
  |.ffunc_1 math_abs
  |  bne SFARG1HI, TISNUM, >1
  |.  sra TMP0, SFARG1LO, 31
  |  xor TMP1, SFARG1LO, TMP0
  |  subu SFARG1LO, TMP1, TMP0
  |  bgez SFARG1LO, ->fff_restv
  |.  nop
  |  lui SFARG1HI, 0x41e0		// 2^31 as a double.
  |  b ->fff_restv
  |.  li SFARG1LO, 0
  |1:
  |  sltiu AT, SFARG1HI, LJ_TISNUM
  |  beqz AT, ->fff_fallback
  |.  sll SFARG1HI, SFARG1HI, 1
  |  srl SFARG1HI, SFARG1HI, 1
  |// fallthrough
  |
  |->fff_restv:
  |  // SFARG1LO/SFARG1HI = TValue result.
  |  lw PC, FRAME_PC(BASE)
  |   sw SFARG1HI, -8+HI(BASE)
  |  addiu RA, BASE, -8
  |   sw SFARG1LO, -8+LO(BASE)
  |->fff_res1:
  |  // RA = results, PC = return.
  |  li RD, (1+1)*8
  |->fff_res:
  |  // RA = results, RD = (nresults+1)*8, PC = return.
  |  andi TMP0, PC, FRAME_TYPE
  |  bnez TMP0, ->vm_return
  |.  move MULTRES, RD
  |  lw INS, -4(PC)
  |  decode_RB8a RB, INS
  |  decode_RB8b RB
  |5:
  |  sltu AT, RD, RB
  |  bnez AT, >6			// More results expected?
  |.  decode_RA8a TMP0, INS
  |  decode_RA8b TMP0
  |  ins_next1
  |  // Adjust BASE. KBASE is assumed to be set for the calling frame.
  |   subu BASE, RA, TMP0
  |  ins_next2
  |
  |6:  // Fill up results with nil.
  |  addu TMP1, RA, RD
  |   addiu RD, RD, 8
  |  b <5
  |.  sw TISNIL, -8+HI(TMP1)
  |
  |.macro math_extern, func
  |  .ffunc math_ .. func
  |  lw SFARG1HI, HI(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  load_got func
  |  sltiu AT, SFARG1HI, LJ_TISNUM
  |  beqz AT, ->fff_fallback
  |.if FPU
  |.  ldc1 FARG1, 0(BASE)
  |.else
  |.  lw SFARG1LO, LO(BASE)
  |.endif
  |  call_extern
  |.  nop
  |  b ->fff_resn
  |.  nop
  |.endmacro
  |
  |.macro math_extern2, func
  |  .ffunc_nn math_ .. func
  |.  load_got func
  |  call_extern
  |.  nop
  |  b ->fff_resn
  |.  nop
  |.endmacro
  |
  |// TODO: Return integer type if result is integer (own sf implementation).
  |.macro math_round, func
  |->ff_math_ .. func:
  |  lw SFARG1HI, HI(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  lw SFARG1LO, LO(BASE)
  |  beq SFARG1HI, TISNUM, ->fff_restv
  |.  sltu AT, SFARG1HI, TISNUM
  |  beqz AT, ->fff_fallback
  |.if FPU
  |.  ldc1 FARG1, 0(BASE)
  |  bal ->vm_ .. func
  |.else
  |.  load_got func
  |  call_extern
  |.endif
  |.  nop
  |  b ->fff_resn
  |.  nop
  |.endmacro
  |
  |  math_round floor
  |  math_round ceil
  |
  |.ffunc math_log
  |  li AT, 8
  |  bne NARGS8:RC, AT, ->fff_fallback	// Exactly 1 argument.
  |.  lw SFARG1HI, HI(BASE)
  |  sltiu AT, SFARG1HI, LJ_TISNUM
  |  beqz AT, ->fff_fallback
  |.  load_got log
  |.if FPU
  |  call_extern
  |.  ldc1 FARG1, 0(BASE)
  |.else
  |  call_extern
  |.  lw SFARG1LO, LO(BASE)
  |.endif
  |  b ->fff_resn
  |.  nop
  |
  |  math_extern log10
  |  math_extern exp
  |  math_extern sin
  |  math_extern cos
  |  math_extern tan
  |  math_extern asin
  |  math_extern acos
  |  math_extern atan
  |  math_extern sinh
  |  math_extern cosh
  |  math_extern tanh
  |  math_extern2 pow
  |  math_extern2 atan2
  |  math_extern2 fmod
  |
  |.if FPU
  |.ffunc_n math_sqrt
  |.  sqrt.d FRET1, FARG1
  |// fallthrough to ->fff_resn
  |.else
  |  math_extern sqrt
  |.endif
  |
  |->fff_resn:
  |  lw PC, FRAME_PC(BASE)
  |  addiu RA, BASE, -8
  |.if FPU
  |  b ->fff_res1
  |.  sdc1 FRET1, -8(BASE)
  |.else
  |  sw SFRETHI, -8+HI(BASE)
  |  b ->fff_res1
  |.  sw SFRETLO, -8+LO(BASE)
  |.endif
  |
  |
  |.ffunc math_ldexp
  |  sltiu AT, NARGS8:RC, 16
  |   lw SFARG1HI, HI(BASE)
  |  bnez AT, ->fff_fallback
  |.   lw CARG4, 8+HI(BASE)
  |  bne CARG4, TISNUM, ->fff_fallback
  |  load_got ldexp
  |.  sltu AT, SFARG1HI, TISNUM
  |  beqz AT, ->fff_fallback
  |.if FPU
  |.  ldc1 FARG1, 0(BASE)
  |.else
  |.  lw SFARG1LO, LO(BASE)
  |.endif
  |  call_extern
  |.  lw CARG3, 8+LO(BASE)
  |  b ->fff_resn
  |.  nop
  |
  |.ffunc_n math_frexp
  |  load_got frexp
  |   lw PC, FRAME_PC(BASE)
  |  call_extern
  |.  addiu CARG3, DISPATCH, DISPATCH_GL(tmptv)
  |   lw TMP1, DISPATCH_GL(tmptv)(DISPATCH)
  |  addiu RA, BASE, -8
  |.if FPU
  |   mtc1 TMP1, FARG2
  |  sdc1 FRET1, 0(RA)
  |   cvt.d.w FARG2, FARG2
  |   sdc1 FARG2, 8(RA)
  |.else
  |  sw SFRETLO, LO(RA)
  |  sw SFRETHI, HI(RA)
  |  sw TMP1, 8+LO(RA)
  |  sw TISNUM, 8+HI(RA)
  |.endif
  |  b ->fff_res
  |.  li RD, (2+1)*8
  |
  |.ffunc_n math_modf
  |  load_got modf
  |   lw PC, FRAME_PC(BASE)
  |  call_extern
  |.  addiu CARG3, BASE, -8
  |  addiu RA, BASE, -8
  |.if FPU
  |  sdc1 FRET1, 0(BASE)
  |.else
  |  sw SFRETLO, LO(BASE)
  |  sw SFRETHI, HI(BASE)
  |.endif
  |  b ->fff_res
  |.  li RD, (2+1)*8
  |
  |.macro math_minmax, name, intins, ismax
  |  .ffunc_1 name
  |  addu TMP3, BASE, NARGS8:RC
  |  bne SFARG1HI, TISNUM, >5
  |.  addiu TMP2, BASE, 8
  |1:  // Handle integers.
  |.  lw SFARG2HI, HI(TMP2)
  |  beq TMP2, TMP3, ->fff_restv
  |.  lw SFARG2LO, LO(TMP2)
  |  bne SFARG2HI, TISNUM, >3
  |.  slt AT, SFARG1LO, SFARG2LO
  |  intins SFARG1LO, SFARG2LO, AT
  |  b <1
  |.  addiu TMP2, TMP2, 8
  |
  |3:  // Convert intermediate result to number and continue with number loop.
  |  sltiu AT, SFARG2HI, LJ_TISNUM
  |  beqz AT, ->fff_fallback
  |.if FPU
  |.  mtc1 SFARG1LO, FRET1
  |  cvt.d.w FRET1, FRET1
  |  b >7
  |.  ldc1 FARG1, 0(TMP2)
  |.else
  |.  nop
  |  bal ->vm_sfi2d_1
  |.  nop
  |  b >7
  |.  nop
  |.endif
  |
  |5:
  |.  sltiu AT, SFARG1HI, LJ_TISNUM
  |  beqz AT, ->fff_fallback
  |.if FPU
  |.  ldc1 FRET1, 0(BASE)
  |.endif
  |
  |6:  // Handle numbers.
  |.  lw SFARG2HI, HI(TMP2)
  |.if FPU
  |  beq TMP2, TMP3, ->fff_resn
  |.else
  |  beq TMP2, TMP3, ->fff_restv
  |.endif
  |.  sltiu AT, SFARG2HI, LJ_TISNUM
  |  beqz AT, >8
  |.if FPU
  |.  ldc1 FARG1, 0(TMP2)
  |.else
  |.  lw SFARG2LO, LO(TMP2)
  |.endif
  |7:
  |.if FPU
  |.if ismax
  |  c.olt.d FARG1, FRET1
  |.else
  |  c.olt.d FRET1, FARG1
  |.endif
  |  movf.d FRET1, FARG1
  |.else
  |.if ismax
  |  bal ->vm_sfcmpogt
  |.else
  |  bal ->vm_sfcmpolt
  |.endif
  |.  nop
  |  movz SFARG1LO, SFARG2LO, CRET1
  |  movz SFARG1HI, SFARG2HI, CRET1
  |.endif
  |  b <6
  |.  addiu TMP2, TMP2, 8
  |
  |8:  // Convert integer to number and continue with number loop.
  |  bne SFARG2HI, TISNUM, ->fff_fallback
  |.if FPU
  |.  lwc1 FARG1, LO(TMP2)
  |  b <7
  |.  cvt.d.w FARG1, FARG1
  |.else
  |.  nop
  |  bal ->vm_sfi2d_2
  |.  nop
  |  b <7
  |.  nop
  |.endif
  |
  |.endmacro
  |
  |  math_minmax math_min, movz, 0
  |  math_minmax math_max, movn, 1
  |
  |//-- String library -----------------------------------------------------
  |
  |.ffunc string_byte			// Only handle the 1-arg case here.
  |  lw CARG3, HI(BASE)
  |   lw STR:CARG1, LO(BASE)
  |  xori AT, NARGS8:RC, 8
  |  addiu CARG3, CARG3, -LJ_TSTR
  |  or AT, AT, CARG3
  |  bnez AT, ->fff_fallback		// Need exactly 1 string argument.
  |.  nop
  |  lw TMP0, STR:CARG1->len
  |    addiu RA, BASE, -8
  |    lw PC, FRAME_PC(BASE)
  |  sltu RD, r0, TMP0
  |   lbu TMP1, STR:CARG1[1]		// Access is always ok (NUL at end).
  |  addiu RD, RD, 1
  |  sll RD, RD, 3			// RD = ((str->len != 0)+1)*8
  |  sw TISNUM, HI(RA)
  |  b ->fff_res
  |.  sw TMP1, LO(RA)
  |
  |.ffunc string_char			// Only handle the 1-arg case here.
  |  ffgccheck
  |.  nop
  |  lw CARG3, HI(BASE)
  |   lw CARG1, LO(BASE)
  |  li TMP1, 255
  |  xori AT, NARGS8:RC, 8		// Exactly 1 argument.
  |  xor TMP0, CARG3, TISNUM		// Integer.
  |   sltu TMP1, TMP1, CARG1		// !(255 < n).
  |  or AT, AT, TMP0
  |   or AT, AT, TMP1
  |  bnez AT, ->fff_fallback
  |.  li CARG3, 1
  |  addiu CARG2, sp, ARG5_OFS
  |  sb CARG1, ARG5
  |->fff_newstr:
  |  load_got lj_str_new
  |   sw BASE, L->base
  |   sw PC, SAVE_PC
  |  call_intern lj_str_new		// (lua_State *L, char *str, size_t l)
  |.  move CARG1, L
  |  // Returns GCstr *.
  |  lw BASE, L->base
  |->fff_resstr:
  |  move SFARG1LO, CRET1
  |  b ->fff_restv
  |.  li SFARG1HI, LJ_TSTR
  |
  |.ffunc string_sub
  |  ffgccheck
  |.  nop
  |  addiu AT, NARGS8:RC, -16
  |   lw CARG3, 16+HI(BASE)
  |   lw TMP0, HI(BASE)
  |    lw STR:CARG1, LO(BASE)
  |  bltz AT, ->fff_fallback
  |.  lw CARG2, 8+HI(BASE)
  |  beqz AT, >1
  |.  li CARG4, -1
  |  bne CARG3, TISNUM, ->fff_fallback
  |.  lw CARG4, 16+LO(BASE)
  |1:
  |  bne CARG2, TISNUM, ->fff_fallback
  |.  li AT, LJ_TSTR
  |  bne TMP0, AT, ->fff_fallback
  |.  lw CARG3, 8+LO(BASE)
  |  lw CARG2, STR:CARG1->len
  |  // STR:CARG1 = str, CARG2 = str->len, CARG3 = start, CARG4 = end
  |  slt AT, CARG4, r0
  |  addiu TMP0, CARG2, 1
  |  addu TMP1, CARG4, TMP0
  |   slt TMP3, CARG3, r0
  |  movn CARG4, TMP1, AT		// if (end < 0) end += len+1
  |   addu TMP1, CARG3, TMP0
  |   movn CARG3, TMP1, TMP3		// if (start < 0) start += len+1
  |   li TMP2, 1
  |  slt AT, CARG4, r0
  |   slt TMP3, r0, CARG3
  |  movn CARG4, r0, AT			// if (end < 0) end = 0
  |   movz CARG3, TMP2, TMP3		// if (start < 1) start = 1
  |  slt AT, CARG2, CARG4
  |  movn CARG4, CARG2, AT		// if (end > len) end = len
  |   addu CARG2, STR:CARG1, CARG3
  |  subu CARG3, CARG4, CARG3		// len = end - start
  |   addiu CARG2, CARG2, sizeof(GCstr)-1
  |  bgez CARG3, ->fff_newstr
  |.  addiu CARG3, CARG3, 1		// len++
  |->fff_emptystr:  // Return empty string.
  |  addiu STR:SFARG1LO, DISPATCH, DISPATCH_GL(strempty)
  |  b ->fff_restv
  |.  li SFARG1HI, LJ_TSTR
  |
  |.macro ffstring_op, name
  |  .ffunc string_ .. name
  |  ffgccheck
  |.  nop
  |  lw CARG3, HI(BASE)
  |   lw STR:CARG2, LO(BASE)
  |  beqz NARGS8:RC, ->fff_fallback
  |.  li AT, LJ_TSTR
  |  bne CARG3, AT, ->fff_fallback
  |.  addiu SBUF:CARG1, DISPATCH, DISPATCH_GL(tmpbuf)
  |  load_got lj_buf_putstr_ .. name
  |  lw TMP0, SBUF:CARG1->b
  |   sw L, SBUF:CARG1->L
  |   sw BASE, L->base
  |  sw TMP0, SBUF:CARG1->w
  |  call_intern extern lj_buf_putstr_ .. name
  |.  sw PC, SAVE_PC
  |  load_got lj_buf_tostr
  |  call_intern lj_buf_tostr
  |.  move SBUF:CARG1, SBUF:CRET1
  |  b ->fff_resstr
  |.  lw BASE, L->base
  |.endmacro
  |
  |ffstring_op reverse
  |ffstring_op lower
  |ffstring_op upper
  |
  |//-- Bit library --------------------------------------------------------
  |
  |->vm_tobit_fb:
  |  beqz TMP1, ->fff_fallback
  |.if FPU
  |.  ldc1 FARG1, 0(BASE)
  |  add.d FARG1, FARG1, TOBIT
  |  jr ra
  |.  mfc1 CRET1, FARG1
  |.else
  |// FP number to bit conversion for soft-float.
  |->vm_tobit:
  |  sll TMP0, SFARG1HI, 1
  |  lui AT, 0x0020
  |  addu TMP0, TMP0, AT
  |  slt AT, TMP0, r0
  |  movz SFARG1LO, r0, AT
  |  beqz AT, >2
  |.  li TMP1, 0x3e0
  |  not TMP1, TMP1
  |  sra TMP0, TMP0, 21
  |  subu TMP0, TMP1, TMP0
  |  slt AT, TMP0, r0
  |  bnez AT, >1
  |.  sll TMP1, SFARG1HI, 11
  |  lui AT, 0x8000
  |  or TMP1, TMP1, AT
  |  srl AT, SFARG1LO, 21
  |  or TMP1, TMP1, AT
  |  slt AT, SFARG1HI, r0
  |  beqz AT, >2
  |.  srlv SFARG1LO, TMP1, TMP0
  |  subu SFARG1LO, r0, SFARG1LO
  |2:
  |  jr ra
  |.  move CRET1, SFARG1LO
  |1:
  |  addiu TMP0, TMP0, 21
  |  srlv TMP1, SFARG1LO, TMP0
  |  li AT, 20
  |  subu TMP0, AT, TMP0
  |  sll SFARG1LO, SFARG1HI, 12
  |  sllv AT, SFARG1LO, TMP0
  |  or SFARG1LO, TMP1, AT
  |  slt AT, SFARG1HI, r0
  |  beqz AT, <2
  |.  nop
  |  jr ra
  |.  subu CRET1, r0, SFARG1LO
  |.endif
  |
  |.macro .ffunc_bit, name
  |  .ffunc_1 bit_..name
  |  beq SFARG1HI, TISNUM, >6
  |.  move CRET1, SFARG1LO
  |  bal ->vm_tobit_fb
  |.  sltu TMP1, SFARG1HI, TISNUM
  |6:
  |.endmacro
  |
  |.macro .ffunc_bit_op, name, ins
  |  .ffunc_bit name
  |  addiu TMP2, BASE, 8
  |  addu TMP3, BASE, NARGS8:RC
  |1:
  |  lw SFARG1HI, HI(TMP2)
  |  beq TMP2, TMP3, ->fff_resi
  |.  lw SFARG1LO, LO(TMP2)
  |.if FPU
  |  bne SFARG1HI, TISNUM, >2
  |.  addiu TMP2, TMP2, 8
  |  b <1
  |.  ins CRET1, CRET1, SFARG1LO
  |2:
  |   ldc1 FARG1, -8(TMP2)
  |  sltu TMP1, SFARG1HI, TISNUM
  |  beqz TMP1, ->fff_fallback
  |.  add.d FARG1, FARG1, TOBIT
  |  mfc1 SFARG1LO, FARG1
  |  b <1
  |.  ins CRET1, CRET1, SFARG1LO
  |.else
  |  beq SFARG1HI, TISNUM, >2
  |.  move CRET2, CRET1
  |  bal ->vm_tobit_fb
  |.  sltu TMP1, SFARG1HI, TISNUM
  |  move SFARG1LO, CRET2
  |2:
  |  ins CRET1, CRET1, SFARG1LO
  |  b <1
  |.  addiu TMP2, TMP2, 8
  |.endif
  |.endmacro
  |
  |.ffunc_bit_op band, and
  |.ffunc_bit_op bor, or
  |.ffunc_bit_op bxor, xor
  |
  |.ffunc_bit bswap
  |  srl TMP0, CRET1, 24
  |   srl TMP2, CRET1, 8
  |  sll TMP1, CRET1, 24
  |   andi TMP2, TMP2, 0xff00
  |  or TMP0, TMP0, TMP1
  |   andi CRET1, CRET1, 0xff00
  |  or TMP0, TMP0, TMP2
  |   sll CRET1, CRET1, 8
  |  b ->fff_resi
  |.  or CRET1, TMP0, CRET1
  |
  |.ffunc_bit bnot
  |  b ->fff_resi
  |.  not CRET1, CRET1
  |
  |.macro .ffunc_bit_sh, name, ins, shmod
  |  .ffunc_2 bit_..name
  |  beq SFARG1HI, TISNUM, >1
  |.  nop
  |  bal ->vm_tobit_fb
  |.  sltu TMP1, SFARG1HI, TISNUM
  |  move SFARG1LO, CRET1
  |1:
  |  bne SFARG2HI, TISNUM, ->fff_fallback
  |.  nop
  |.if shmod == 1
  |  li AT, 32
  |  subu TMP0, AT, SFARG2LO
  |  sllv SFARG2LO, SFARG1LO, SFARG2LO
  |  srlv SFARG1LO, SFARG1LO, TMP0
  |.elif shmod == 2
  |  li AT, 32
  |  subu TMP0, AT, SFARG2LO
  |  srlv SFARG2LO, SFARG1LO, SFARG2LO
  |  sllv SFARG1LO, SFARG1LO, TMP0
  |.endif
  |  b ->fff_resi
  |.  ins CRET1, SFARG1LO, SFARG2LO
  |.endmacro
  |
  |.ffunc_bit_sh lshift, sllv, 0
  |.ffunc_bit_sh rshift, srlv, 0
  |.ffunc_bit_sh arshift, srav, 0
  |// Can't use rotrv, since it's only in MIPS32R2.
  |.ffunc_bit_sh rol, or, 1
  |.ffunc_bit_sh ror, or, 2
  |
  |.ffunc_bit tobit
  |->fff_resi:
  |  lw PC, FRAME_PC(BASE)
  |  addiu RA, BASE, -8